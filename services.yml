stages:
  - setup
  - prepare
  - deploy
  - deploy-charts
  - verify
  - cleanup

include:
  - services/alluxio.yml
  - services/batch-job.yml
  - services/frontend.yml
  - services/history.yml
  - services/metadata.yml
  - services/mysql.yml
  - services/spark-operator.yml
  - services/schema.yml
  - services/zeppelin.yml
  - services/rbac.yml

variables:
  CHARTS_DIR: charts
  OVERRIDES_FILE: overrides.yml
  SERVICE_NAMESPACE: "${CI_PROJECT_NAME}-${CI_PROJECT_ID}-${CI_ENVIRONMENT}"

.generator:
  # extenders need to generate a file "deployment/${PROJECT}.yml"
  stage: prepare
  extends:
    - .environment
  image: ${CI_REGISTRY}/planetrover/infrastructure/alpine:3.15
  rules:
    - if: '($DEPLOY_PROJECT == "${PROJECT}" || $DEPLOY_PROJECT == "all") && $ONLY_CLEANUP == "false"'
  variables: {}
    # PROJECT
  artifacts:
    paths:
      - ${DEPLOYMENTS_DIR}/${PROJECT}.yml

.helm-prepare:
  stage: prepare
  extends:
    - .package-pull
  variables: {}
    # SERVICE_NAME:
    # PACKAGE_NAME:
    # FILE_NAME:
    # PACKAGE_VERSION:
    # ID:
  before_script:
    - mkdir -p ${CHARTS_DIR}/${SERVICE_NAME}/
    - cd ${CHARTS_DIR}/${SERVICE_NAME}/
  artifacts:
    paths:
      - ${CHARTS_DIR}

.verify-running:
  stage: verify
  extends:
    - .environment
  rules:
    - if: '$UPSTREAM_PROJECT == "metadata"'
  variables:
    TIMEOUT: "60"
    # SERVICE_NAME:
    # SERVICE_LABEL:
    # PROJECT:"
  script:
    - |
      while [ $(kubectl get pod -n ${SERVICE_NAMESPACE} -l ${SERVICE_LABEL} -o jsonpath="{.items[0].status.phase}") != 'Running' ]; do
       if [[ ${TIMEOUT} -le 0 ]]
        then
          echo "Timed out waiting; pod status $(kubectl get pod -n ${SERVICE_NAMESPACE} -l ${SERVICE_LABEL} -o jsonpath="{.items[0].status.phase}") != 'Running'"
          exit 1
        fi
       TIMEOUT=$((TIMEOUT-1))
       sleep 1
      done
    - kubectl describe pods -n ${SERVICE_NAMESPACE} -l ${SERVICE_LABEL}
    - echo -e "\n LOGS -------- \n"
    - kubectl logs $(kubectl get pod -n ${SERVICE_NAMESPACE} -l ${SERVICE_LABEL} -o jsonpath="{.items[0].metadata.name}") --all-containers=true


.verify-cleanup:
  stage: cleanup
  rules:
    - if: '$UPSTREAM_PROJECT == "metadata"'
      when: manual
      allow_failure: true
  extends:
    - .environment
  variables:
    TIMEOUT: "60"
    # SERVICE_NAME:
    # SERVICE_LABEL:
    # PROJECT:"
  script:
    - helm uninstall ${SERVICE_NAME} -n ${SERVICE_NAMESPACE} || true
    - kubectl delete service/${MYSQL_SERVICE_NAME} deployment/${MYSQL_SERVICE_NAME} -n ${SERVICE_NAMESPACE} || true

Deploy resources:
  # Deploy all generated resource configs in the deployments directory
  # Also install helm charts by explicitly referencing sub-scripts
  stage: deploy
  rules:
    - if: '$ONLY_CLEANUP == "false"'
  extends:
    - .environment
  script:
    - |
      if ! kubectl get sa spark -n ${SERVICE_NAMESPACE}
      then
        echo "Creating 'spark' service account"
        kubectl apply -n ${SERVICE_NAMESPACE} -f - <<EOF
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: spark
          namespace: ${SERVICE_NAMESPACE}
      EOF
      fi

      # create mysql secret
      decoded_username=`echo "root" | base64`
      decoded_password=`echo ${MYSQL_ROOT_PASSWORD} | base64`
      kubectl apply -n ${SERVICE_NAMESPACE} -f - <<EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: ${SERVICE_NAMESPACE}-mysql-secret
        namespace: ${SERVICE_NAMESPACE}
      type: Opaque
      data:
        user: "${decoded_username}"
        password: "${decoded_password}"
      EOF

      # create s3 secrets
      decoded_access_key=`echo ${S3A_ACCESS_KEY} | base64`
      decoded_secret_key=`echo ${S3A_SECRET_KEY} | base64`
      kubectl apply -n ${SERVICE_NAMESPACE} -f - <<EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: ${SERVICE_NAMESPACE}-s3-secret
        namespace: ${SERVICE_NAMESPACE}
      type: Opaque
      data:
        accessKey: ${decoded_access_key}
        secretKey: ${decoded_secret_key}
      EOF

      if [ -d "${DEPLOYMENTS_DIR}/" ] 
      then
        echo "Deploying the following files"
        ls ${DEPLOYMENTS_DIR}/
        kubectl apply -n ${SERVICE_NAMESPACE} -f ${DEPLOYMENTS_DIR}/
      else
        echo "No resources to deploy"
      fi

Deploy helm charts:
  # Install all helm charts
  stage: deploy-charts
  rules:
    - if: '$ONLY_CLEANUP == "false"'
  extends:
    - .environment
  script:
    - |
      ls -lRt ${CHARTS_DIR}/
      if [ -d "${CHARTS_DIR}/" ]
      then
        for SERVICE in $(ls ${CHARTS_DIR}) ; do
          [[ ${ENABLE_ALLUXIO} -eq 0 ]] && [[ ${SERVICE} == "alluxio" ]] && continue

          echo "Installing/upgrading service ${SERVICE}..."
          HELM_COMMAND="helm upgrade --install -n ${SERVICE_NAMESPACE} --values ${CHARTS_DIR}/${SERVICE}/${OVERRIDES_FILE} ${SERVICE} ${CHARTS_DIR}/${SERVICE}/*.tgz"
          echo "${HELM_COMMAND}"
          ${HELM_COMMAND}
        done
      else
        echo "No helm charts to deploy"
      fi

Cleanup services:
  # Remove all services
  stage: cleanup
  rules:
    - if: '$ONLY_CLEANUP == "true"'
  extends:
    - .environment
  dependencies: [] # skip downloading any artifacts
  variables:
    TIMEOUT: "60"
  script:
    - |
      echo "Cleanup services: ..."
      service_count=`kubectl get pods  -n ${SERVICE_NAMESPACE} 2> /dev/null | wc -l` 
      if [[ ${service_count} -gt 0 ]]
      then
        echo "Follwoing services will be cleaned up:"
        kubectl get pods -n ${SERVICE_NAMESPACE}

        for service in `helm list -n ${SERVICE_NAMESPACE} | grep -v NAME | awk '{print $1}'`
        do
          echo "Uninstalling $service..."
          helm uninstall ${service} -n ${SERVICE_NAMESPACE}
        done

        for service in `kubectl get sa -n ${SERVICE_NAMESPACE} | grep -v NAME | awk '{print $1}'`
        do
          echo "Deleting service account $service"
          kubectl delete sa $service -n ${SERVICE_NAMESPACE}
        done

        for p in `kubectl get pods -n ${SERVICE_NAMESPACE} | grep -v NAME | awk '{print $1}'`
        do
          echo "Deleting pod $p"
          kubectl delete pod $p -n ${SERVICE_NAMESPACE} || true
        done
      fi

      echo "Deleting mysql deployment"
      kubectl delete deployment mysql -n ${SERVICE_NAMESPACE} || true

      echo "Deleting mysql account"
      kubectl delete service mysql -n ${SERVICE_NAMESPACE} || true

      echo "Deleting clusterrolebinding"
      kubectl delete clusterrolebinding spark-role-${SERVICE_NAMESPACE} --namespace=${SERVICE_NAMESPACE} || true

      mysql_secret=${service_namespace}-mysql-secret
      echo "Deleting mysql secret"
      kubectl delete secret ${mysql_secret} || true

      s3_secret=${service_namespace}-s3-secret
      echo "Deleting s3 secret"
      kubectl delete secret ${s3_secret} || true

      echo "Deleting image secret ${PULL_SECRET}"
      kubectl delete secret ${PULL_SECRET} -n ${SERVICE_NAMESPACE} --ignore-not-found=true || true

      echo "Deleting image secret ${PLANETROVER_PULL_SECRET}"
      kubectl delete secret ${PLANETROVER_PULL_SECRET} -n ${SERVICE_NAMESPACE} --ignore-not-found=true || true

      echo "cleanup_services: done"