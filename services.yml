stages:
  - prepare
  - deploy-kustomizations
  - deploy-charts
  - cleanup

include:
  - services/alluxio.yml
  - services/frontend.yml
  - services/metadata.yml
  - services/mysql.yml
  - services/schema.yml
  - services/zeppelin.yml

variables:
  CHARTS_DIR: charts
  OVERRIDES_FILE: overrides.yml

.generator:
  # extenders need to generate a file "deployment/${PROJECT}.yml"
  stage: prepare
  image: alpine
  rules:
    - if: '($DEPLOY_PROJECT == "${PROJECT}" || $DEPLOY_PROJECT == "all") && $ONLY_CLEANUP == "false"'
  variables: {}
    # PROJECT
  artifacts:
    paths:
      - ${DEPLOYMENTS_DIR}/${PROJECT}.yml

.helm-prepare:
  stage: prepare
  rules:
    - if: '($DEPLOY_PROJECT == "${PROJECT}" || $DEPLOY_PROJECT == "all") && $ONLY_CLEANUP == "false"'
  extends:
    - .package-pull
  variables: {}
    # SERVICE_NAME:
    # PACKAGE_NAME:
    # FILE_NAME:
    # PACKAGE_VERSION:
    # ID:
  before_script:
    - mkdir -p ${CHARTS_DIR}/${SERVICE_NAME}/
    - cd ${CHARTS_DIR}/${SERVICE_NAME}/
  artifacts:
    paths:
      - ${CHARTS_DIR}

Deploy:
  # Deploy all generated resource configs in the deployments directory
  # Also install helm charts by explicitly referencing sub-scripts
  stage: deploy
  image: ${CI_REGISTRY}/planetrover/infrastructure/staging
  extends:
    - .environment
  script:
    - echo "Deploying the following files"
    - ls deployments/
    - kubectl apply -f deployments/

Helm install all:
  # Install all helm charts
  stage: deploy-helm
  image: ${CI_REGISTRY}/planetrover/infrastructure/helm:3
  rules:
    - if: '$ONLY_CLEANUP == "false"'
  extends:
    - .environment
  script:
    - cd ${CHARTS_DIR}
    - |
      for SERVICE in $(ls) ; do
        helm upgrade --install --values ${SERVICE}/${OVERRIDES_FILE} ${SERVICE} ${SERVICE}/*.tgz
      done

Cleanup services:
  # Remove all services
  stage: cleanup
  image: ${CI_REGISTRY}/planetrover/infrastructure/staging
  rules:
    - if: '$ONLY_CLEANUP == "true"'
    - when: manual
  extends:
    - .environment
  dependencies: [] # skip downloading any artifacts
  variables:
    TIMEOUT: "60"
  script:
    - kubectl exec alluxio-master-0 -c alluxio-master -- alluxio fs rm -RU /${SPARK_WAREHOUSE} || true
    - kubectl exec alluxio-master-0 -c alluxio-master -- alluxio fs rm -RU /${SPARK_DEPENDENCY_DIR} || true
    - helm uninstall alluxio alluxio-charts/alluxio || true
    - kubectl delete pod ${SPARK_DRIVER_POD_NAME} --ignore-not-found=true
    - kubectl delete service/${MYSQL_SVC_NAME} deployment/${MYSQL_SVC_NAME} || true
    - helm uninstall zeppelin-service || true
    - helm uninstall schema-service || true
    - helm uninstall metadata-service || true
    - helm uninstall history-server || true
    - helm uninstall sdp-frontend-service || true
    - echo "Waiting for resources to cleanup..."
    - |
      while [[ $(kubectl get pods --no-headers | wc -l) -gt 0 ]] &&
            [[ $(kubectl get services --no-headers | wc -l) -gt 0 ]]
      do
        if [[ ${TIMEOUT} -le 0 ]]
        then
          echo "Timed out waiting for resources to cleanup"
          exit 1
        fi
        TIMEOUT=$((TIMEOUT-1))
        sleep 1
      done
