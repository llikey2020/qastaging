# Include this template to deploy to an environment defined in a skeleton job like this:
#
# .environment:
#   tags: ["kubernetes"]
#   environment: testing
#
# And define the following variables in the project's Settings -> CI/CD -> Variables:
# - ALLUXIO_UFS
# - AWS_ACCESS_KEY_ID
# - AWS_SECRET_ACCESS_KEY
#
# Other variables that the includer could override:
# - REGISTRY
# - REGISTRY_USER
# - REGISTRY_PASSWORD

stages:
  - prepare
  - deploy
  - deploy-helm
  - cleanup
  - delete-secrets

include:
  - project: planetrover/templates
    file: templates.yml
  - services.yml

variables:
  DEPLOY_PROJECT:
    value: all
    description: all, alluxio, history, hive, metadata, zeppelin
  ONLY_CLEANUP: 
    value: "false"
    description: Skip cleanup when false, only run cleanup when true
  JOB:
    value: none
    description: none
  SPARK_DRIVER_MEMORY:
    value: 8g
    description: spark.driver.memory
  SPARK_EXECUTOR_MEMORY:
    value: 8g
    description: spark.executor.memory
  CACHE_SSD_SIZE:
    value: 10G
    description: Cache SSD quota
  SPARK_WAREHOUSE:
    value: spark-warehouse/
    description: Path in Alluxio UFS for the Spark SQL warehouse files
  SPARK_SQL_PERF_JAR:
    value: spark-sql-perf_2.12-0.5.1-SNAPSHOT.jar
    description: Path in Alluxio UFS for the Spark SQL performance jar
  ALLUXIO_VERSION:
    value: 2.6.0
  ALLUXIO_SVC: alluxio-master-0:19998
  SPARK_DEPENDENCY_DIR:
    value: spark-files/
    description: Path in Alluxio UFS for the Spark SQL jar(s)
  FRONTEND_IMAGE_TAG:
    value: latest
  SCHEMA_IMAGE_TAG:
    value: latest
  SPARK_IMAGE_TAG:
    value: latest
  ZEPPELIN_IMAGE_TAG:
    value: latest
  METADATA_IMAGE_TAG:
    value: latest
  SPARK_DRIVER_POD_NAME: spark-driver
  MYSQL_VERSION: "5.7"
  MYSQL_SVC_NAME: mysql
  MYSQL_ROOT_PASSWORD: password
  METASTORE_DATABASE: metastore
  DEPLOYMENTS_DIR: deployments
  PULL_SECRET: docker-login
  REGISTRY: ${CI_REGISTRY}
  REGISTRY_USER: ${CI_REGISTRY_USER}
  REGISTRY_PASSWORD: ${CI_REGISTRY_PASSWORD}
  SPARK_PROJECT: sequoiadp/spark

Registry login:
  # Login to the docker registry and create the secret used for pulling images
  stage: prepare
  image: ${CI_REGISTRY}/planetrover/infrastructure/staging
  extends:
    - .environment
  script:
    - |
      kubectl create secret docker-registry ${PULL_SECRET} \
        --namespace=${KUBE_NAMESPACE} \
        --docker-server=${REGISTRY} \
        --docker-username=${REGISTRY_USER} \
        --docker-password=${REGISTRY_PASSWORD}

Deploy:
  # Deploy all generated resource configs in the deployments directory
  # Also install helm charts by explicitly referencing sub-scripts
  stage: deploy
  image: ${CI_REGISTRY}/planetrover/infrastructure/staging
  extends:
    - .environment
  script:
    - echo "Deploying the following files"
    - ls deployments/
    - kubectl apply -f deployments/

Cleanup services:
  # Remove all services
  stage: cleanup
  image: ${CI_REGISTRY}/planetrover/infrastructure/staging
  rules:
    - if: '$ONLY_CLEANUP == "true"'
  extends:
    - .environment
  variables:
    TIMEOUT: "60"
  script:
    - kubectl exec alluxio-master-0 -c alluxio-master -- alluxio fs rm -RU /${SPARK_WAREHOUSE} || true
    - kubectl exec alluxio-master-0 -c alluxio-master -- alluxio fs rm -RU /${SPARK_DEPENDENCY_DIR} || true
    - helm uninstall alluxio alluxio-charts/alluxio || true
    - kubectl delete pod ${SPARK_DRIVER_POD_NAME} --ignore-not-found=true
    - kubectl delete service/${MYSQL_SVC_NAME} deployment/${MYSQL_SVC_NAME} || true
    - helm uninstall zeppelin-service || true
    - helm uninstall schema-service || true
    - helm uninstall metadata-service || true
    - helm uninstall history-server || true
    - helm uninstall sdp-frontend-service || true
    - echo "Waiting for resources to cleanup..."
    - |
      while [[ $(kubectl get pods --no-headers | wc -l) -gt 0 ]] &&
            [[ $(kubectl get services --no-headers | wc -l) -gt 0 ]]
      do
        if [[ ${TIMEOUT} -le 0 ]]
        then
          echo "Timed out waiting for resources to cleanup"
          exit 1
        fi
        TIMEOUT=$((TIMEOUT-1))
        sleep 1
      done

Delete pull secret:
  stage: delete-secrets
  image: ${CI_REGISTRY}/planetrover/infrastructure/staging
  extends:
    - .environment
  script:
    - kubectl delete secret ${PULL_SECRET} --ignore-not-found=true
